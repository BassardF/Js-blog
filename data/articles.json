[
	{
		"article_id" : 1,
		"title" : "Angular Watching depth",
		"description" : "Performance and depth analysis of Angular's watching system.",		
		"date" : "5/3/2015",
		"tags" : ["JavaScript", "AngularJs"],
		"author" : "Frank Bassard",
		"author_id" : "1",		
		"released" : true,
		"content" : [{
			"type" : "p",
			"value" : "Watching properties of the $scope is one of the core features of Angular. Most of the time this process is hidden and run in the background for you by the engine, but it's still common to have to use it manually."
		}, {
			"type" : "p",
			"value" : "Angular gives 3 way to watch a property depending on the depth required. The most depth you need, the less efficient is going to be the watch cycle."
		}, {
			"type" : "img",
			"value" : "angular-depth.png"
		}, {
			"type" : "h2",
			"value" : "Watch by reference"
		}, {
			"type" : "p",
			"value" : "Watching by reference is the most common and fastest way to watch an attribute. As JavaScript is sharing objects by reference, the reference watch is only going to be triggered when the whole reference changes."
		}, {
			"type" : "p",
			"value" : "Keep in mind that no change within the object will trigger the watch since the reference hasn't changed."
		}, {
			"type" : "code",
			"syntax" : "js",
			"value" : "$scope.$watch(variable, callback, false);"
		}, {
			"type" : "p",
			"value" : "It's also the most common mechanism used by Angular, most of the build directives use reference watching (ngClass, ngModel, ngIf, ngShow, select ...)"
		}, {
			"type" : "h2",
			"value" : "Watch a collection"
		}, {
			"type" : "p",
			"value" : "Watching a collection is watching an ordered set of references. Creating, deleting or moving elements within the collection is going to trigger the watch but changes within objects of the collection isn't."
		}, {
			"type" : "code",
			"syntax" : "js",
			"value" : "$scope.$watchCollection(variable, callback);"
		}, {
			"type" : "p",
			"value" : "You can find that behaviour in a few native directives like ngRepeat."
		}, {
			"type" : "h2",
			"value" : "Equality watches"
		}, {
			"type" : "p",
			"value" : "Equality watches are looking for every change within the watched object, whatever the depth of the property. This process use the angular.equals mechanism which is comparing every field of an object to a copy of himself."
		}, {
			"type" : "code",
			"syntax" : "js",
			"value" : "$scope.$watch(variable, callback, true);"
		}, {
			"type" : "p",
			"value" : "Keep in mind that using equality watches is the heavier type watch, use it only if you need an in-depth comparaison of your object."
		}]
	},

	{
		"article_id" : 2,
		"title" : "TypeScript basic cheatsheet for developer",
		"description" : "A quick overview / get started of TypeScript.",
		"date" : "6/9/2015",
		"tags" : ["JavaScript", "TypeScript"],
		"author" : "Frank Bassard",
		"author_id" : "1",		
		"released" : true,
		"content" : [{
			"type" : "p",
			"value" : "Wether they have inspired ES6 standards or been inspired by those, transpilers ands shims define tomorrow’s standard JavaScript. Although I spent heaps of time playing with those, I always avoided using them when trying to create products. Mainly because I wasn’t always happy with the compiled JavaScript (also because I felt robbed of a special kind of freedom well known to JavaScript aficionados)."
		}, {
			"type" : "p",
			"value" : "I recently gave a shot to TypeScript which should be (ok, it’s kinda sure …) the language of choice for the next version of Angular and found myself quite please with the compiled output."
		}, {
			"type" : "p",
			"value" : "As I sincerely consider using it for my next project here is my quick cheatsheet. It’s nothing more than a quick introduction made for developer (mainly made for me). Give it a try if you want to get started in no time or juste to have an overview of TypeScript features."
		}, {
			"type" : "link",
			"href" : "assets/typescript101.pdf",
			"value" : "TypeScript 101"
		},  {
			"type" : "p",
			"value" : "A few interesting shims / transpilers : "
		}, {
			"type" : "link",
			"href" : "https://babeljs.io/",
			"value" : "Babel"
		}, {
			"type" : "link",
			"href" : "http://coffeescript.org/",
			"value" : "CoffeeScript"
		}, {
			"type" : "link",
			"href" : "http://www.typescriptlang.org/",
			"value" : "TypeScript"
		}, {
			"type" : "link",
			"href" : "https://github.com/paulmillr/es6-shim/",
			"value" : "ES6-shim by paulmillr"
		}]
	}

]